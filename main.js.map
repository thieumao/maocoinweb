{"version":3,"sources":["./src/app/app.component.html","./src/app/components/block-view/block-view.component.html","./src/app/components/transactions-table/transactions-table.component.html","./src/app/pages/blockchain-viewer/blockchain-viewer.component.html","./src/app/pages/create-transaction/create-transaction.component.html","./src/app/pages/pending-transactions/pending-transactions.component.html","./src/app/pages/settings/settings.component.html","./src/app/pages/wallet-balance/wallet-balance.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/block-view/block-view.component.scss","./src/app/components/block-view/block-view.component.ts","./src/app/components/transactions-table/transactions-table.component.scss","./src/app/components/transactions-table/transactions-table.component.ts","./src/app/pages/blockchain-viewer/blockchain-viewer.component.scss","./src/app/pages/blockchain-viewer/blockchain-viewer.component.ts","./src/app/pages/create-transaction/create-transaction.component.scss","./src/app/pages/create-transaction/create-transaction.component.ts","./src/app/pages/pending-transactions/pending-transactions.component.scss","./src/app/pages/pending-transactions/pending-transactions.component.ts","./src/app/pages/settings/settings.component.scss","./src/app/pages/settings/settings.component.ts","./src/app/pages/wallet-balance/wallet-balance.component.scss","./src/app/pages/wallet-balance/wallet-balance.component.ts","./src/app/services/blockchain.service.ts","./src/environments/environment.ts","./src/main.ts","buffer (ignored)","crypto (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export default \"<nav class=\\\"navbar navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">\\n    <img src=\\\"assets/img/logo-savjee.svg\\\" width=\\\"30\\\" height=\\\"30\\\" class=\\\"d-inline-block align-top\\\" alt=\\\"\\\">\\n    &nbsp;SavjeeCoin\\n  </a>\\n\\n  <div>\\n    <button routerLink=\\\"/new/transaction/pending\\\" class=\\\"btn btn-outline-light\\\" *ngIf=\\\"thereArePendingTransactions()\\\">\\n      Pending transactions\\n      <span class=\\\"badge badge-light\\\">{{blockchain.pendingTransactions.length}}</span>\\n    </button>\\n    &nbsp;\\n    <button routerLink=\\\"/settings\\\" class=\\\"btn btn-outline-light\\\">\\n      Settings\\n    </button>\\n    &nbsp;\\n    <button routerLink=\\\"/new/transaction\\\" class=\\\"btn btn-outline-light\\\">\\n      Create transaction\\n    </button>\\n  </div>\\n</nav>\\n\\n<br>\\n\\n<div class=\\\"container\\\" *ngIf=\\\"showInfoMessage === true\\\">\\n  <div class=\\\"alert alert-primary alert-dismissible fade show\\\" role=\\\"alert\\\">\\n    <h4 class=\\\"alert-heading\\\">First things first.</h4>\\n    This tool gives you the ability to look behind-the-scenes of a blockchain. You can create transactions, mine blocks and see how they all work together. Go ahead, make some transactions, mine a block, tweak the settings and see the effects of your actions in real-time.\\n    <hr>\\n    <a href=\\\"https://github.com/Savjee/savjeecoin-frontend\\\">Source code</a> - Based on <a href=\\\"https://github.com/SavjeeTutorials/SavjeeCoin\\\">my Javascript blockchain</a>.\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\" (click)=\\\"dismissInfoMessage()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n</div>\\n\\n<router-outlet></router-outlet>\\n\\n<footer class=\\\"text-muted text-center\\\" style=\\\"margin-top: 150px;\\\">\\n  <small>For educational purposes only.<br>\\n  <a href=\\\"https://github.com/Savjee/savjeecoin-frontend\\\" target=\\\"_blank\\\">Source code</a></small>\\n</footer>\\n\"","export default \"<div class=\\\"card\\\" [class.border-primary]=\\\"isSelectedBlock()\\\">\\n    <div class=\\\"card-body\\\">\\n      <h5 class=\\\"card-title\\\">Block {{ getBlockNumber() }} <small class=\\\"text-muted\\\" *ngIf=\\\"block.previousHash == 0\\\">(Genesis block)</small></h5>\\n    </div>\\n\\n     <ul class=\\\"list-group list-group-flush\\\">\\n\\t    <li class=\\\"list-group-item\\\">\\n\\t    \\t<span class=\\\"\\\">Hash</span>\\n\\t    \\t<br>\\n\\t    \\t<div class=\\\"text-truncate\\\" [style.color]=\\\"'#' + block.hash.substring(0,6)\\\">\\n\\t    \\t\\t<small>{{ block.hash }}</small>\\n\\t    \\t</div>\\n\\n\\t\\t\\t<br>\\n\\t\\t\\t<span class=\\\"\\\">Hash of previous block</span>\\n\\t    \\t<br>\\n\\n\\t    \\t<div class=\\\"text-truncate\\\" [style.color]=\\\"'#' + block.previousHash.substring(0,6)\\\">\\n\\t    \\t\\t<small>{{ block.previousHash }}</small>\\n\\t    \\t</div>\\n\\t    </li>\\n\\n\\t    <li class=\\\"list-group-item\\\">\\n\\t    \\t<span class=\\\"\\\">Nonce</span><br>\\n\\t    \\t<div class=\\\"text-truncate text-muted\\\">\\n\\t    \\t\\t<small>{{ block.nonce }}</small>\\n\\t    \\t</div>\\n\\t    </li>\\n\\n\\t    <li class=\\\"list-group-item\\\">\\n\\t    \\t<span class=\\\"\\\">Timestamp</span><br>\\n\\t    \\t<div class=\\\"text-truncate text-muted\\\">\\n\\t    \\t\\t<small>{{ block.timestamp }}</small>\\n\\t    \\t</div>\\n\\t    </li>\\n\\t  </ul>\\n\\n\\t  <!-- <div class=\\\"card-body\\\"> -->\\n\\t  \\t<!-- <span class=\\\"card-link\\\" *ngIf=\\\"!blockHasTx()\\\">Block has no transactions</span> -->\\n\\t  \\t<!-- <span class=\\\"card-link\\\" *ngIf=\\\"blockHasTx()\\\">Contains {{block.transactions.length}} transactions</span> -->\\n\\t  <!-- </div> -->\\n  </div>\"","export default \"<p *ngIf=\\\"transactions.length === 0\\\">This block has no transactions</p>\\n\\n<table class=\\\"table table-hover table-striped\\\" *ngIf=\\\"transactions.length > 0\\\">\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">From</th>\\n      <th scope=\\\"col\\\">To</th>\\n      <th scope=\\\"col\\\">Amount</th>\\n      <th scope=\\\"col\\\">Timestamp</th>\\n      <th scope=\\\"col\\\">Valid?</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let tx of transactions; index as index\\\">\\n      <td>{{index}}</td>\\n      <td class=\\\"text-truncate\\\" style=\\\"max-width: 100px;\\\">\\n\\n        <a [routerLink]=\\\"['/wallet', tx.fromAddress]\\\" *ngIf=\\\"tx.fromAddress !== null\\\">{{tx.fromAddress}}</a>\\n\\n        <span *ngIf=\\\"tx.fromAddress === null\\\">System</span>\\n\\n        <span class=\\\"text-muted\\\" *ngIf=\\\"blockchainService.addressIsFromCurrentUser(tx.fromAddress)\\\">\\n          <br><small>(That's yours!)</small>\\n        </span>\\n      </td>\\n      <td class=\\\"text-truncate\\\" style=\\\"max-width: 100px;\\\">\\n          <a [routerLink]=\\\"['/wallet', tx.toAddress]\\\">{{tx.toAddress}}</a>\\n\\n          <span class=\\\"text-muted\\\" *ngIf=\\\"blockchainService.addressIsFromCurrentUser(tx.toAddress)\\\">\\n            <br><small>(That's yours!)</small>\\n          </span>\\n      </td>\\n      <td>\\n        {{tx.amount}}\\n        <span *ngIf=\\\"tx.fromAddress === null\\\" class=\\\"text-muted\\\"><br><small>(Block reward)</small></span>\\n      </td>\\n      <td>\\n        {{tx.timestamp}}<br>\\n        <span class=\\\"text-muted\\\"><small>{{tx.timestamp |date:'MMM d, y, HH:mm'}}</small></span>\\n      </td>\\n      <td style=\\\"max-width: 40px;\\\">\\n        <span *ngIf=\\\"tx.isValid()\\\">✓</span>\\n        <span *ngIf=\\\"!tx.isValid()\\\">✗</span>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","export default \"<div class=\\\"container\\\">\\n\\t<h1>Blocks on chain</h1>\\n\\t<p>Each card represents a block on the chain. Click on a block to see the transactions stored inside.</p>\\n</div>\\n\\n<div class=\\\"container\\\" style=\\\"overflow-x: scroll;white-space: nowrap;\\\">\\n\\t<app-block-view \\n\\t\\t*ngFor=\\\"let block of blocks\\\" \\n\\t\\t[block]=\\\"block\\\" \\n\\t\\t[selectedBlock]=\\\"selectedBlock\\\"\\n\\t\\t(click)=\\\"showTransactions(block)\\\"\\n\\t></app-block-view>\\n</div>\\n\\n<br><br>\\n\\n<div class=\\\"container\\\">\\n\\t<h1>Transactions inside block {{ getBlockNumber(selectedBlock) }}</h1>\\n\\n\\t<app-transactions-table\\n\\t\\t[transactions]=\\\"selectedBlock.transactions\\\"\\n\\t></app-transactions-table>\\n</div>\\n\\n\"","export default \"<div class=\\\"container\\\">\\n\\t<h1>Create transaction</h1>\\n\\t<p>Transfer some money to someone!</p>\\n\\n\\t<br>\\n\\n\\t<div class=\\\"form-group\\\">\\n\\t    <label for=\\\"fromAddress\\\">From address</label>\\n\\t    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"fromAddress\\\" aria-describedby=\\\"fromAddressHelp\\\" [(ngModel)]=\\\"ownWalletKey.publicKey\\\" disabled>\\n\\t    <small id=\\\"fromAddressHelp\\\" class=\\\"form-text text-muted\\\">\\n\\t    \\tThis is your wallet address. You cannot change it because you can only spend your own coins.\\n\\t    </small>\\n  \\t</div>\\n\\n  \\t<div class=\\\"form-group\\\">\\n\\t    <label for=\\\"toAddress\\\">To address</label>\\n\\t    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"toAddress\\\" aria-describedby=\\\"toAddressHelp\\\" [(ngModel)]=\\\"newTx.toAddress\\\">\\n\\t    <small id=\\\"toAddressHelp\\\" class=\\\"form-text text-muted\\\">\\n\\t    \\tThe address of the wallet where you want to send the money to. You can type random text here (if you are not interested in recovering the funds)\\n\\t    </small>\\n  \\t</div>\\n\\n  \\t<div class=\\\"form-group\\\">\\n\\t    <label for=\\\"amount\\\">Amount</label>\\n\\t    <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"amount\\\" aria-describedby=\\\"amountHelp\\\" [(ngModel)]=\\\"newTx.amount\\\">\\n\\t    <small id=\\\"amountHelp\\\" class=\\\"form-text text-muted\\\">\\n\\t    \\tYou can transfer any amount. Account balance is not checked in this demo. Have at it!\\n\\t    </small>\\n  \\t</div>\\n\\n  \\t<button (click)=\\\"createTransaction()\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Sign & create transaction</button>\\n\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n\\n\\t<div class=\\\"alert alert-success\\\" role=\\\"alert\\\" *ngIf=\\\"justAddedTx\\\">\\n\\t\\tTransaction created successfully!\\n\\t</div>\\n\\n\\t<h1>Pending transactions</h1>\\n\\t<p>These transactions are waiting to be included in the next block. Next block is created when you start the mining process.</p>\\n\\n\\t<app-transactions-table\\n\\t\\t[transactions]=\\\"pendingTransactions\\\">\\n\\t</app-transactions-table>\\n\\n\\t <button class=\\\"btn btn-primary\\\" *ngIf=\\\"pendingTransactions.length > 0 && miningInProgress === false\\\" (click)=\\\"minePendingTransactions()\\\">\\n     \\tStart mining\\n    </button>\\n\\n    <div *ngIf=\\\"miningInProgress === true\\\">\\n    \\tMining block.. Hang on...\\n    </div>\\n</div>\"","export default \"<div class=\\\"container\\\">\\n  <h1>Settings</h1>\\n  <p>Control how the blockchain behaves when new transactions or blocks are created. Changes are automatically saved.</p>\\n\\n  <br>\\n\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"difficulty\\\">Difficulty</label>\\n    <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"difficulty\\\" aria-describedby=\\\"difficultyHelp\\\" [(ngModel)]=\\\"blockchain.difficulty\\\">\\n    <small id=\\\"difficultyHelp\\\" class=\\\"form-text text-muted\\\">\\n    \\tDifficulty controls how long the mining process takes. Higher numbers will make mining a lot slower!\\n    \\t<br>Default: 2\\n    </small>\\n  </div>\\n\\n  <br>\\n\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"miningReward\\\">Mining reward</label>\\n    <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"miningReward\\\" aria-describedby=\\\"miningRewardHelp\\\" [(ngModel)]=\\\"blockchain.miningReward\\\">\\n    <small id=\\\"miningRewardHelp\\\" class=\\\"form-text text-muted\\\">\\n\\t\\tHow much \\\"coins\\\" a miner receives for successfully creating a new block for the chain.\\n\\t\\t<br>Default: 100\\n    </small>\\n  </div>\\n\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n\\t<h1>Wallet details</h1>\\n\\n\\t<p style=\\\"word-wrap:break-word;\\\">\\n\\t\\t<strong>Address:</strong>\\n\\t\\t<br>\\n\\t\\t{{walletAddress}}\\n\\t</p>\\n\\n\\t<p>\\n\\t\\t<strong>Balance:</strong>\\n\\t\\t<br>\\n\\t\\t{{ balance }}\\n\\t</p>\\n\\n\\t<hr>\\n\\n\\t<h1>Transactions</h1>\\n\\t<p *ngIf=\\\"transactions.length === 0\\\">This wallet has made no transactions (yet)</p>\\n\\t<app-transactions-table\\n\\t\\t[transactions]=\\\"transactions\\\"\\n\\t\\t*ngIf=\\\"transactions.length > 0\\\"\\n\\t></app-transactions-table>\\n</div>\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BlockchainViewerComponent } from './pages/blockchain-viewer/blockchain-viewer.component';\nimport { SettingsComponent } from './pages/settings/settings.component';\nimport { CreateTransactionComponent } from './pages/create-transaction/create-transaction.component';\nimport { PendingTransactionsComponent } from './pages/pending-transactions/pending-transactions.component';\nimport { WalletBalanceComponent } from './pages/wallet-balance/wallet-balance.component';\n\nconst routes: Routes = [\n  {path: '', component: BlockchainViewerComponent },\n  {path: 'settings', component: SettingsComponent},\n  {path: 'new/transaction', component: CreateTransactionComponent },\n  {path: 'new/transaction/pending', component: PendingTransactionsComponent },\n  {path: 'wallet/:address', component: WalletBalanceComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { BlockchainService } from './services/blockchain.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  public blockchain;\n  public showInfoMessage = true;\n\n  constructor(private blockchainService: BlockchainService) {\n    this.blockchain = blockchainService.blockchainInstance;\n  }\n\n  ngOnInit() {\n  }\n\n  thereArePendingTransactions() {\n    return this.blockchain.pendingTransactions.length > 0;\n  }\n\n  dismissInfoMessage() {\n    this.showInfoMessage = false;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BlockViewComponent } from './components/block-view/block-view.component';\nimport { BlockchainViewerComponent } from './pages/blockchain-viewer/blockchain-viewer.component';\n\nimport { BlockchainService } from './services/blockchain.service';\nimport { SettingsComponent } from './pages/settings/settings.component';\nimport { TransactionsTableComponent } from './components/transactions-table/transactions-table.component';\nimport { CreateTransactionComponent } from './pages/create-transaction/create-transaction.component';\nimport { PendingTransactionsComponent } from './pages/pending-transactions/pending-transactions.component';\nimport { WalletBalanceComponent } from './pages/wallet-balance/wallet-balance.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BlockViewComponent,\n    BlockchainViewerComponent,\n    SettingsComponent,\n    TransactionsTableComponent,\n    CreateTransactionComponent,\n    PendingTransactionsComponent,\n    WalletBalanceComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [\n    BlockchainService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \".card {\\n  width: 18rem;\\n  display: inline-block;\\n  margin: 0 10px 0 0; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZS9EZXNrdG9wL1Byb2plY3QvQmxvY2tjaGFpbi9zYXZqZWVjb2luLWZyb250ZW5kL3NyYy9hcHAvY29tcG9uZW50cy9ibG9jay12aWV3L2Jsb2NrLXZpZXcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDQyxZQUFZO0VBQ1oscUJBQW9CO0VBQ3BCLGtCQUFrQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9ibG9jay12aWV3L2Jsb2NrLXZpZXcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZHtcblx0d2lkdGg6IDE4cmVtOyBcblx0ZGlzcGxheTppbmxpbmUtYmxvY2s7IFxuXHRtYXJnaW46IDAgMTBweCAwIDA7XG59Il19 */\"","import { Component, OnInit, Input } from '@angular/core';\nimport { BlockchainService } from '../../services/blockchain.service';\n\n@Component({\n  selector: 'app-block-view',\n  templateUrl: './block-view.component.html',\n  styleUrls: ['./block-view.component.scss']\n})\nexport class BlockViewComponent implements OnInit {\n  @Input()\n  public block;\n\n  @Input()\n  public selectedBlock;\n\n  private blocksInChain;\n\n  constructor(private blockchainService: BlockchainService) {\n    this.blocksInChain = blockchainService.blockchainInstance.chain;\n  }\n\n\n  ngOnInit() {\n  }\n\n  blockHasTx() {\n    return this.block.transactions.length > 0;\n  }\n\n  isSelectedBlock() {\n    return this.block === this.selectedBlock;\n  }\n\n  getBlockNumber() {\n    return this.blocksInChain.indexOf(this.block) + 1;\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zLXRhYmxlL3RyYW5zYWN0aW9ucy10YWJsZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, Input } from '@angular/core';\nimport { BlockchainService } from '../../services/blockchain.service';\n\n@Component({\n  selector: 'app-transactions-table',\n  templateUrl: './transactions-table.component.html',\n  styleUrls: ['./transactions-table.component.scss']\n})\nexport class TransactionsTableComponent implements OnInit {\n  @Input()\n  public transactions = [];\n\n  constructor(public blockchainService: BlockchainService) { }\n\n  ngOnInit() {\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Jsb2NrY2hhaW4tdmlld2VyL2Jsb2NrY2hhaW4tdmlld2VyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, Input } from '@angular/core';\nimport { BlockchainService } from '../../services/blockchain.service';\n@Component({\n  selector: 'app-blockchain-viewer',\n  templateUrl: './blockchain-viewer.component.html',\n  styleUrls: ['./blockchain-viewer.component.scss']\n})\nexport class BlockchainViewerComponent implements OnInit {\n\n  public blocks = [];\n  public selectedBlock = null;\n\n  constructor(private blockchainService: BlockchainService) {\n    this.blocks = blockchainService.blockchainInstance.chain;\n    this.selectedBlock = this.blocks[0];\n    console.log(this.blocks);\n  }\n\n  ngOnInit() {\n  }\n\n  showTransactions(block) {\n    console.log(block);\n    this.selectedBlock = block;\n    return false;\n  }\n\n  blockHasTx(block) {\n    return block.transactions.length > 0;\n  }\n\n  selectedBlockHasTx() {\n    return this.blockHasTx(this.selectedBlock);\n  }\n\n  isSelectedBlock(block) {\n    return this.selectedBlock === block;\n  }\n\n  getBlockNumber(block) {\n    return this.blocks.indexOf(block) + 1;\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NyZWF0ZS10cmFuc2FjdGlvbi9jcmVhdGUtdHJhbnNhY3Rpb24uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BlockchainService, IWalletKey } from '../../services/blockchain.service';\nimport { Transaction } from 'SavjeeCoin/src/blockchain';\n\n@Component({\n  selector: 'app-create-transaction',\n  templateUrl: './create-transaction.component.html',\n  styleUrls: ['./create-transaction.component.scss']\n})\nexport class CreateTransactionComponent implements OnInit {\n  public newTx = new Transaction();\n  public ownWalletKey: IWalletKey;\n\n  constructor(private blockchainService: BlockchainService, private router: Router) {\n    this.newTx = new Transaction();\n    this.ownWalletKey = blockchainService.walletKeys[0];\n  }\n\n  ngOnInit() {\n  }\n\n  createTransaction() {\n    const newTx = this.newTx;\n\n    // Set the FROM address and sign the transaction\n    newTx.fromAddress = this.ownWalletKey.publicKey;\n    newTx.signTransaction(this.ownWalletKey.keyObj);\n\n    try {\n      this.blockchainService.addTransaction(this.newTx);\n    } catch (e) {\n      alert(e);\n      return;\n    }\n\n    this.router.navigate(['/new/transaction/pending', { addedTx: true }]);\n    this.newTx = new Transaction();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3BlbmRpbmctdHJhbnNhY3Rpb25zL3BlbmRpbmctdHJhbnNhY3Rpb25zLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BlockchainService } from '../../services/blockchain.service';\n\n@Component({\n  selector: 'app-pending-transactions',\n  templateUrl: './pending-transactions.component.html',\n  styleUrls: ['./pending-transactions.component.scss']\n})\nexport class PendingTransactionsComponent implements OnInit {\n  public pendingTransactions = [];\n  public miningInProgress = false;\n  public justAddedTx = false;\n\n  constructor(private blockchainService: BlockchainService, private router: Router, private route: ActivatedRoute) {\n    this.pendingTransactions = blockchainService.getPendingTransactions();\n  }\n\n  ngOnInit() {\n    if (this.route.snapshot.paramMap.get('addedTx')) {\n      this.justAddedTx = true;\n\n      setTimeout(() => {\n        this.justAddedTx = false;\n      }, 4000);\n    }\n  }\n\n  minePendingTransactions() {\n    this.miningInProgress = true;\n    this.blockchainService.minePendingTransactions();\n    this.miningInProgress = false;\n    this.router.navigate(['/']);\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { BlockchainService } from '../../services/blockchain.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss']\n})\nexport class SettingsComponent implements OnInit {\n  public blockchain;\n\n  constructor(private blockchainService: BlockchainService) {\n    this.blockchain = blockchainService.blockchainInstance;\n  }\n\n  ngOnInit() {\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3dhbGxldC1iYWxhbmNlL3dhbGxldC1iYWxhbmNlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BlockchainService } from '../../services/blockchain.service';\n\n@Component({\n  selector: 'app-wallet-balance',\n  templateUrl: './wallet-balance.component.html',\n  styleUrls: ['./wallet-balance.component.scss']\n})\nexport class WalletBalanceComponent implements OnInit {\n  public walletAddress = '';\n  public balance = 0;\n  public transactions = [];\n\n  constructor(private route: ActivatedRoute, private blockchainService: BlockchainService) {}\n\n  ngOnInit() {\n    this.route.params.subscribe( (params) => {\n        this.walletAddress = params['address'];\n\n        const blockchain = this.blockchainService.blockchainInstance;\n        this.balance = blockchain.getBalanceOfAddress(this.walletAddress);\n        this.transactions = blockchain.getAllTransactionsForWallet(this.walletAddress);\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Blockchain } from 'SavjeeCoin/src/blockchain';\nimport EC from 'elliptic';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlockchainService {\n  public blockchainInstance = new Blockchain();\n  public walletKeys: Array<IWalletKey> = [];\n\n  constructor() {\n    this.blockchainInstance.difficulty = 1;\n    this.blockchainInstance.minePendingTransactions('hi');\n    this.generateWalletKeys();\n  }\n\n  minePendingTransactions() {\n    this.blockchainInstance.minePendingTransactions(\n      this.walletKeys[0].publicKey\n    );\n  }\n\n  addressIsFromCurrentUser(address) {\n    return address === this.walletKeys[0].publicKey;\n  }\n\n  generateWalletKeys() {\n    const ec = new EC.ec('secp256k1');\n    const key = ec.genKeyPair();\n\n    this.walletKeys.push({\n      keyObj: key,\n      publicKey: key.getPublic('hex'),\n      privateKey: key.getPrivate('hex'),\n    });\n\n    console.log(this.walletKeys);\n  }\n\n  getPendingTransactions() {\n    return this.blockchainInstance.pendingTransactions;\n  }\n\n  addTransaction(tx) {\n    this.blockchainInstance.addTransaction(tx);\n  }\n}\n\nexport interface IWalletKey {\n  keyObj: any;\n  publicKey: string;\n  privateKey: string;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */"],"sourceRoot":"webpack:///"}